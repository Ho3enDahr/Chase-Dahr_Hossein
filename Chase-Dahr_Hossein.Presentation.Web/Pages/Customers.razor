@page "/customers"
@using Chase_Dahr_Hossein.Presentation.Web.Models;
@using Chase_Dahr_Hossein.Presentation.Web.Services;
@inject CustomerService CustomerService
@inject NavigationManager Navigation

<h3>Customers</h3>
<p>
    <button class="btn btn-primary" @onclick="NavigateToCreate">Add Customer</button>
</p>

<input type="text" class="form-control mb-3" @bind="searchTerm" placeholder="Search customers..." />

<ConfirmDialog @ref="confirmDialog" />

@if (customers == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-bordered">
        <thead class="table-dark">
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in PaginatedCustomers)
            {
                <tr>
                    <td>@customer.FirstName</td>
                    <td>@customer.LastName</td>
                    <td>@customer.Email</td>
                    <td>@customer.PhoneNumber</td>
                    <td>
                        <button class="btn btn-warning btn-sm" @onclick="() => EditCustomer(customer.Id)">Edit</button>
                        <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteDialog(customer.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(!CanGoPrevious)">Previous</button>
        <span>Page @currentPage of @TotalPages</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@(!CanGoNext)">Next</button>
    </div>
}

@code {
    private List<Customer> customers;
    private ConfirmDialog confirmDialog;
    private string searchTerm = "";
    private int currentPage = 1;
    private int pageSize = 5;

    protected override async Task OnInitializedAsync()
    {
        customers = await CustomerService.GetCustomers();
    }

    private void NavigateToCreate()
    {
        Navigation.NavigateTo("/customers/create");
    }

    private void EditCustomer(Guid id)
    {
        Navigation.NavigateTo($"/customers/edit/{id}");
    }

    private void ShowDeleteDialog(Guid id)
    {
        confirmDialog.Show("Are you sure you want to delete this customer?", async () => await DeleteCustomer(id));
    }

    private async Task DeleteCustomer(Guid id)
    {
        await CustomerService.DeleteCustomer(id);
        customers = await CustomerService.GetCustomers();
    }

    private List<Customer> PaginatedCustomers =>
        customers
            .Where(c => string.IsNullOrEmpty(searchTerm) || c.FirstName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();

    private int TotalPages => (int)Math.Ceiling((double)customers.Count / pageSize);
    private bool CanGoNext => currentPage < TotalPages;
    private bool CanGoPrevious => currentPage > 1;

    private void NextPage()
    {
        if (CanGoNext) currentPage++;
    }

    private void PreviousPage()
    {
        if (CanGoPrevious) currentPage--;
    }
}
